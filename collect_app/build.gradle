apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'com.google.firebase.crashlytics'
apply from: '../config/quality.gradle'
apply from: '../config/jacoco.gradle'
apply plugin: 'com.google.dagger.hilt.android'
apply plugin: 'kotlin-kapt'

import com.android.ddmlib.DdmPreferences

DdmPreferences.setTimeOut(60000)

ant.condition(property: 'os', value: 'windows') {
    os(family: 'windows')
}
ant.condition(property: 'os', value: 'unix') {
    os(family: 'unix')
}

// Build numbers were manually set until 1067
def LEGACY_BUILD_NUMBER_OFFSET = 1067

// Based on http://stackoverflow.com/questions/17097263#24121734
def getMasterCommitCount = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            switch (ant.properties.os) {
                case 'windows':
                    commandLine 'cmd', '/c', 'git', 'rev-list', '--first-parent', '--count', 'master'
                    break
                case 'unix':
                    commandLine 'git', 'rev-list', '--first-parent', '--count', 'master'
                    break
            }
            standardOutput = stdout
        }
        return Integer.parseInt(stdout.toString().trim())
    } catch (ignored) {
        return -1
    }
}

def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            switch (ant.properties.os) {
                case 'windows':
                    commandLine 'cmd', '/c', 'git', 'describe', '--tags', '--dirty', '--always'
                    break
                case 'unix':
                    commandLine 'git', 'describe', '--tags', '--dirty', '--always'
                    break
            }
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (ignored) {
        return null
    }
}

def secretsFile = file('secrets.properties')
def secrets = new Properties()
if (secretsFile.exists()) {
    secrets.load(new FileInputStream(secretsFile))
}
def googleMapsApiKey = secrets.getProperty('GOOGLE_MAPS_API_KEY', '')
def mapboxToken = secrets.getProperty('MAPBOX_ACCESS_TOKEN', '')

android {
    compileSdkVersion(29)
    buildFeatures {
        viewBinding true
    }
    defaultConfig {
        minSdkVersion(21)
        targetSdkVersion(29)
        testInstrumentationRunner('androidx.test.runner.AndroidJUnitRunner')
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        archivesBaseName = 'collect'
    }

    signingConfigs {
        release {
            if (secrets.getProperty('RELEASE_STORE_FILE')) {
                storeFile file(secrets.getProperty('RELEASE_STORE_FILE'))
                storePassword secrets.getProperty('RELEASE_STORE_PASSWORD')
                keyAlias secrets.getProperty('RELEASE_KEY_ALIAS')
                keyPassword secrets.getProperty('RELEASE_KEY_PASSWORD')
            }
        }
    }

    buildTypes {

        // Release build for all forks
        release {
            if (secrets.getProperty('RELEASE_STORE_FILE')) {
                signingConfig signingConfigs.release
            }
            minifyEnabled(true)
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            resValue("bool", "FIREBASE_ENABLED", "true")
            resValue("string", "GOOGLE_MAPS_API_KEY", googleMapsApiKey)
            buildConfigField 'String', "MAPBOX_ACCESS_TOKEN", '"' + mapboxToken + '"'
        }


        debug {
            testCoverageEnabled((findProperty("enableJacoco") ?: "false").toBoolean())
            resValue("string", "GOOGLE_MAPS_API_KEY", googleMapsApiKey)
            buildConfigField 'String', "MAPBOX_ACCESS_TOKEN", '"' + mapboxToken + '"'

        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        jniLibs {
            excludes += ['lib/x86/libmapbox-gl.so', 'lib/x86_64/libmapbox-gl.so']
        }
        resources {
            pickFirsts += ['META-INF/DEPENDENCIES', 'META-INF/LICENSE', 'META-INF/LICENSE.txt', 'META-INF/NOTICE', 'META-INF/NOTICE.txt', 'META-INF/services/com.fasterxml.jackson.core.JsonFactory', 'META-INF/services/com.fasterxml.jackson.core.ObjectCodec', 'META-INF/services/javax.ws.rs.ext.MessageBodyReader', 'META-INF/services/javax.ws.rs.ext.MessageBodyWriter']
        }
    }

    dexOptions {
        javaMaxHeapSize '2048M'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
            all {
                // https://discuss.circleci.com/t/11207/24
                // it seems any number works, but 1024 - 2048 seem reasonable
                maxHeapSize = "2048M"
            }
        }
    }
    lint {
        abortOnError true
        checkGeneratedSources true
        htmlOutput file("$reportsDir/lint/lint-result.html")
        htmlReport true
        //TODO FIXME
        //lintConfig file("$configDir/lint.xml")
        xmlOutput file("$reportsDir/lint/lint-result.xml")
        xmlReport true
    }
    namespace 'org.odk.collect.android'
}

configurations.all {
    resolutionStrategy {
        cacheDynamicVersionsFor(0, 'seconds')
        cacheChangingModulesFor(0, 'seconds')

        force('com.google.code.findbugs:jsr305:1.3.9')
    }
    transitive = true
}

dependencies {
    implementation 'androidx.legacy:legacy-support-v13:1.0.0'
    implementation 'androidx.browser:browser:1.3.0'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.exifinterface:exifinterface:1.2.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.preference:preference-ktx:1.1.1'
    implementation "androidx.fragment:fragment-ktx:${rootProject.fragmentVersion}"

    implementation 'com.google.android.material:material:1.3.0'
    implementation 'com.google.android:flexbox:2.0.1'

    implementation "com.google.android.gms:play-services-auth:19.0.0"
    implementation "com.google.android.gms:play-services-maps:17.0.1"
    implementation "com.google.android.gms:play-services-location:18.0.0"
    implementation 'com.google.firebase:firebase-analytics:19.0.0'
    implementation 'com.google.firebase:firebase-crashlytics:18.3.2'

    implementation 'com.mapbox.mapboxsdk:mapbox-android-sdk:9.2.1'
    implementation 'com.mapbox.mapboxsdk:mapbox-android-plugin-annotation-v9:0.8.0'

    implementation("com.google.guava:guava:29.0-android")

    implementation "com.squareup.okhttp3:okhttp:${rootProject.okhttp3Version}"
    implementation 'com.burgstaller:okhttp-digest:2.3'

    implementation 'com.github.mohamadian:PersianJodaTime:1.2'
    implementation 'com.github.chanmratekoko:myanmar-calendar:1.0.6.RC3'
    implementation "com.rarepebble:colorpicker:3.0.1"
    implementation "commons-io:commons-io:2.6"
    implementation "net.sf.opencsv:opencsv:2.4"
    implementation("org.getodk:javarosa:3.1.0") {
        exclude group: 'joda-time'
        exclude group: 'org.slf4j'
    }
    implementation "com.karumi:dexter:6.1.2"
    implementation project(':nbi-stubs')

    implementation "org.osmdroid:osmdroid-android:6.1.6"
    implementation("com.google.api-client:google-api-client-android:1.30.9") {
        exclude group: 'org.apache.httpcomponents'
        exclude group: 'com.google.guava'
    }
    implementation("com.google.apis:google-api-services-drive:v3-rev20200413-1.30.9") {
        exclude group: 'org.apache.httpcomponents'
        exclude group: 'com.google.guava'
    }
    implementation("com.google.apis:google-api-services-sheets:v4-rev20200508-1.30.9") {
        exclude group: 'org.apache.httpcomponents'
        exclude group: 'com.google.guava'
    }

    implementation "com.jakewharton.timber:timber:4.7.1"
    implementation "org.slf4j:slf4j-api:2.0.0-alpha0"
    implementation "com.arcao:slf4j-timber:3.1@aar"

    //updating to 3.4.0 requires minSdkVersion >=24 https://github.com/zxing/zxing/releases/tag/zxing-3.4.0
    implementation "com.google.zxing:core:3.3.0"

    //updating would require minSdkVersion >=24
    implementation "com.journeyapps:zxing-android-embedded:3.6.0"

    implementation "net.danlew:android.joda:2.10.6"
    implementation project(path: ':commons')
    implementation project(path: ':assets')

    // Android Architecture Components:
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation "androidx.viewpager2:viewpager2:1.0.0"

    // DI
    implementation "com.google.dagger:hilt-android:2.41"
    kapt "com.google.dagger:hilt-compiler:2.41"

    // Needed for injection into Robolectric tests
//    testAnnotationProcessor "com.google.dagger:dagger-compiler:${rootProject.daggerVersion}"


    // Dagger Android:
   /* implementation "com.google.dagger:dagger-android:${rootProject.daggerVersion}"
    implementation "com.google.dagger:dagger-android-support:${rootProject.daggerVersion}"
    annotationProcessor "com.google.dagger:dagger-android-processor:${rootProject.daggerVersion}"*/

    // RxJava 2:
    implementation "io.reactivex.rxjava2:rxandroid:2.1.1"
    implementation "io.reactivex.rxjava2:rxjava:2.2.19"

    // Better "Subjects" for Rx:
    implementation "com.jakewharton.rxrelay2:rxrelay:2.1.1"

    // Annotations understood by FindBugs
    compileOnly 'com.google.code.findbugs:annotations:3.0.1'
    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'



    // Used to generate documentation screenshots.
    androidTestImplementation "tools.fastlane:screengrab:2.0.0"

    // Testing-only dependencies
    testImplementation "junit:junit:4.13.2"
    testImplementation "org.mockito:mockito-core:3.7.7"

    testImplementation "org.robolectric:robolectric:4.5.1"
    testImplementation 'androidx.test.ext:junit:1.1.3'
    debugImplementation "androidx.fragment:fragment-testing:1.4.1"
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    testImplementation "org.robolectric:shadows-multidex:4.5.1"
    testImplementation "com.squareup.okhttp3:mockwebserver:${rootProject.okhttp3Version}"
    testImplementation "com.squareup.okhttp3:okhttp-tls:${rootProject.okhttp3Version}"

    // power mock (for mocking final methods which is not handled by mockito)
    testImplementation "org.powermock:powermock-module-junit4:2.0.9"
    testImplementation "org.powermock:powermock-api-mockito2:2.0.9"

    testImplementation "org.json:json:20190722"

    androidTestImplementation "org.mockito:mockito-android:3.7.7"
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation "androidx.arch.core:core-testing:2.1.0"
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.3.0'
    androidTestImplementation("androidx.test.espresso:espresso-intents:3.3.0") {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    }

    androidTestImplementation "com.squareup.okhttp3:mockwebserver:${rootProject.okhttp3Version}"

    androidTestImplementation "androidx.work:work-testing:2.4.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.1"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.5.0'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.8"
    implementation 'androidx.work:work-runtime:2.7.1'
    implementation 'org.greenrobot:eventbus:3.3.1'
}

apply plugin: 'com.google.gms.google-services'
repositories {
    maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    mavenCentral()

}



